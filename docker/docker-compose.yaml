version: '2.4'

services:
  arena:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile-arena
    image: pogona_arena:${arena_tag-latest}
    container_name: arena
    privileged: true
    user: "1000"
    group_add:
      - "1001"
    depends_on:
      - cache
      - db
      - mqtt
      - periphery
    volumes:
      - ../Arena:${ROOT_DIR}/Arena
      - ../pogona_hunter:${ROOT_DIR}/pogona_hunter
      - /tmp/.X11-unix:/tmp/.X11-unix:ro
      - /run/dbus:/run/dbus:rw
      - /run/user/1000:/run/user/1000:rw
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - ${MEDIA_DIR-/tmp}:/arena/media
    restart: "unless-stopped"
    runtime: nvidia
    command: "python3 api.py"
    ports:
      - 0.0.0.0:5080:5084
    working_dir: ${ROOT_DIR}/Arena
    environment:
      - FLASK_APP=api.py
      - IS_PROD=1
      - LC_ALL=C.UTF-8
      - LANG=C.UTF-8
      - PYTHONUNBUFFERED=1
      - GENICAM_GENTL64_PATH=/arena/Vimba_6_0/VimbaUSBTL/CTI/x86_64bit

  app:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile-app
    image: pogona_app:${app_tag-latest}
    container_name: pogona_hunter
    depends_on:
      - cache
    restart: "unless-stopped"
    command: "http-server dist"
#    volumes:
#    - ../pogona_hunter:/app
    ports:
     - 8080:8080

  periphery:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile-periphery
    restart: "unless-stopped"
    image: pogona_periphery:${periphery_tag-latest}
    container_name: periphery
    privileged: true
    command: "python main.py --mqtt_host mqtt"
    volumes:
      - ../Arena/configurations/periphery_config.json:/Arena/configurations/periphery_config.json
    environment:
      - PYTHONUNBUFFERED=1

  mqtt:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile-mqtt
    restart: "unless-stopped"
    image: pogona_mqtt:${mqtt_tag-latest}
    container_name: mqtt
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - 1884:1883
#      - 0.0.0.0:9001:9001

  cache:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile-cache
    image: pogona_cache:${cache_tag-latest}
    container_name: cache
    restart: "unless-stopped"
    ports:
    - 6379:6379
    - 6380:6380

  db:
    image: timescale/timescaledb-ha:pg14-latest
    restart: "unless-stopped"
    volumes:
      - db_data:/home/postgres/pgdata/data
    ports:
      - 0.0.0.0:5432:5432
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=arena

  grafana:
    image: grafana/grafana
    restart: "unless-stopped"
    ports:
      - 3000:3000

volumes:
  db_data:
